import SwiftUI

struct EditTicketView: View {
    let ticket: Ticket
    @ObservedObject var viewModel: TicketListViewModel
    @Environment(\.dismiss) private var dismiss
    @State private var selectedStatus: String
    
    private let statuses = [
        ("–°–æ–∑–¥–∞–Ω", "üÜï –°–æ–∑–¥–∞–Ω", "–¢–∏–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"),
        ("–ù–∞–∑–Ω–∞—á–µ–Ω", "üë®‚Äçüíª –ù–∞–∑–Ω–∞—á–µ–Ω", "–ù–∞–∑–Ω–∞—á–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É"),
        ("–í —Ä–∞–±–æ—Ç–µ", "üîß –í —Ä–∞–±–æ—Ç–µ", "–ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Ç–∏–∫–µ—Ç–æ–º"),
        ("–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "‚ùì –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞", "–ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        ("–û–∂–∏–¥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É", "–ñ–¥—ë–º –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏"),
        ("–ó–∞–∫—Ä—ã—Ç", "üóÉ –ó–∞–∫—Ä—ã—Ç", "–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç"),
        ("–û—Ç–º–µ–Ω—ë–Ω", "üö´ –û—Ç–º–µ–Ω—ë–Ω", "–û—à–∏–±–æ—á–Ω—ã–π —Ç–∏–∫–µ—Ç –∏–ª–∏ –¥—É–±–ª—å")
    ]
    
    init(ticket: Ticket, viewModel: TicketListViewModel) {
        self.ticket = ticket
        self.viewModel = viewModel
        _selectedStatus = State(initialValue: ticket.status)
    }
    
    var body: some View {
        NavigationView {
            List {
                Section("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–∫–µ—Ç–µ") {
                    VStack(alignment: .leading, spacing: 8) {
                        Text(ticket.title)
                            .font(.headline)
                        Text(ticket.description)
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                        if let category = ticket.category {
                            Label(category, systemImage: "folder")
                                .font(.caption)
                                .foregroundColor(.blue)
                        }
                    }
                    .padding(.vertical, 4)
                }
                
                Section("–°—Ç–∞—Ç—É—Å") {
                    ForEach(statuses, id: \.0) { status, title, description in
                        HStack {
                            Button(action: { selectedStatus = status }) {
                                HStack {
                                    Text(title)
                                        .font(.system(.body, design: .rounded))
                                    Spacer()
                                    if selectedStatus == status {
                                        Image(systemName: "checkmark.circle.fill")
                                            .foregroundColor(.accentColor)
                                    }
                                }
                            }
                            .foregroundColor(selectedStatus == status ? .primary : .secondary)
                        }
                        if selectedStatus == status {
                            Text(description)
                                .font(.caption)
                                .foregroundColor(.secondary)
                                .padding(.leading, 4)
                        }
                    }
                }
            }
            .navigationTitle("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–û—Ç–º–µ–Ω–∞") {
                        dismiss()
                    }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å") {
                        viewModel.updateTicketStatus(ticketId: ticket.id, newStatus: selectedStatus)
                        dismiss()
                    }
                    .fontWeight(.medium)
                }
            }
        }
    }
} 